omri need indicate solr at_location field accept multiple values add field declaration see reference information options. makes next i.e still answered question 'next 'previous really means already know next page another query get next record. hi henri make sure container running solr set utf-0 example tomcat server.xml file connector definitions include join conversation like us facebook follow us twitter. oops sorry hijacking thread put real subject place. need include unique field 'fl parameter needed anyways match highlight fragments result docs highlighting working join conversation may even get ipad nook like us facebook follow us twitter. hi anyone ever set things figured good way access solr filter chain java code specifically would like tokenize data search strings possibly even facet values way solr filter chains additional pre-search processing e.g tokenizing way produce better fuzzy search query post-search processing find matches within facet values thanks advance. well sort depends mean 'previous 'next record sequencing built concept solr lucene indexes sequential 's i.e use case data available support use case. hi mark used dih shall need leave comments set others done another question initial index create delta run 'commit run 'optimize without optimize 'deleted records still show query results. actual query look hl.snippets parameter join conversation may even get ipad nook like us facebook follow us twitter. could add standard field shard populate distinct value shard facet field look facet counts value corresponds shard hey-presto done. hi michael well stock answer 'it depends' example would able search filename without searching file contents would always search together copy file parsed file content pdf single search field set default search field kind processing normalizing data case insensitive accent insensitive 'word contains camel case e.g theveryidea split case changes watch things like ipad 'word contains numbers left together separated stemming searching 'stemming would find 'stem 'stemmed sort thing always english languages involved text processing indexing vs searching able find hits based first characters term ngrams able highlight text segments search terms found probably read various tokenizers filters available prototyping see looks basically 'one fits part power solr lucene configurability achieve results business case calls part drawback solr lucene especially new folks configurability achieve results business case calls anyone got anything else suggest michael. hi nizan realize replying thread email client would get back 's info thread since replication replicate top-level solr.xml file defines available cores dynamic cores requirement custom code wasted. hi sorry duplication seems like sent yesterday never made troubles solr spellcheck response running version overview search something really ugly like get back response suggestions list 'rck suggestions list two words 'book fine 'spelled correctly i.e got hits word suggestions ugly thing though hits problem handling result tell difference suggestions 'correctly spelled term suggestions something odd like happening searches obviously garbage i.e words real words show index suggestions illustrate point setup running multiple shards may part issue example 'book might found shards another think anything schema since really search suggestions returned us bits pieces would really like see response coming back indication word found suggestions hacked around code little bit wondering anyone across approaches taken created new classes extend indexbasedspellchecker spellcheckcomponent follows package imports excluded sort brevity methods taken overridden classes changes noted sd comments modification allows correctly spelled words returned suggestion modification working tandem sirsidynixspellcheckcomponent allows words suggestions returned spell check component even sharded search changes marked sd comments modification designed may work tandem sirsidynixindexbasedspellchecker return mispelled words suggestions flipped false suggestions index true thesuggestions null //sd removed thesuggestions.size shardrequest allow misspelled words suggestions thesuggestions.size always true hence removal continue //if shardrequest word mispelled add list mispelled words else extendedresults suggestions.size word misspelled added suggestions freqinfo 's xml getting back search applying modified code thanks. looks like specified value pdfy reflected results query query searching vpn hence matches query yield. using unique solr index sounds like may value solr index unique bears resemblance unique derived data another way put makes two records solr index 'the unique 's two entries solr index 's related original data unique immutable i.e update row database unique derived row would update otherwise nothing solr recognize duplicate entry 'delete 'insert instead 'insert. oops sorry missed well multivalued setting explicitly allow multiple values actual use case i.e multiple values field multivalued problem trying solve. without speaking directly indexing searching specific fields certainly possible retrieve xml file solr db allow binary field associated index document store gzipped xml file binary field retrieve certain conditions get original document information found solr handle much faster db regularly index large portion documents xml files prone frequent changes keep blob solr index make sure retrieve field really xml files relatively static i.e change rarely new ones still might make sense use real db store keep primary key db row solr index join conversation like us facebook follow us twitter. reading wrote originally wrote think misunderstanding based architecture code code 'server level solrj indexing calls meant 'server solr instance mean 'client thinking without thinking 'server sorry hopefully someone else chime specific view message context http //replaced.url sent solr user mailing list archive nabble.com. suppose something silly like fact indexing chain includes 'words= stopwords.txt query chain register february get time viewing three course circulation basics self-paced training suite. hi downloaded file unzipped see inside file tried unzipping errors look inside file see java code example ended unzipped .java extension example path apache-solr-0.0\lucene\backwards\src\test\org\apache\lucene\analysis\tokenattributes see two files ideas specific tool using expand windows xp thanks join conversation may even get ipad nook cid replaced email.addr.es like us facebook cid replaced email.addr.es follow us twitter. use replication call inexperience really early working fully understanding solr best way approach various issues mention prototype non-production code covered though look replication feature thanks. possibility consider really need documents specifically empty non-defined values oxymoron control values send indexing could set special value means 'no value done similar vein using something like empty given field meaning original document actually value field i.e something unlikely 'real value easily select documents querying field empty instead negated form select however considered things like index relatively rare us value 'gut feel impacting indexes much size-wise performance-wise. thing think post-process snippets i.e pull highlighting tags strings look match result description field looking match find replace description original highlight text i.e highlight tags still place join conversation may even get ipad nook like us facebook follow us twitter. hi indexed various types documents fields author already able use facet choose values narrow given use case runs something like example list authors matching 'steel count number documents associated user chooses entries gets document results author present 'sideways essentially present facets first results choose facet show results facets show match fashion based analysis chain based fuzzy search search term entered know get list author facet values documents 'steel matches author field problem author multi-valued field returns facet values match 'steel values author field really ugly approach work time hoping someone better idea read facet parameters searched various places across anything like use facet.prefix looking facets begin search term looking facets contain search term could show anywhere fuzzy handling may exact matches anyways masochists know approach search something like searching documents author_boost field internal 'author field search term mark twain proximity distance somewhat arbitrary return hits really kludgy bits hoping enough hits hits would include mark twain however specify fl fields return field never exists getting back empty elements xml highlighting author_boost field tells us value search terms found sort document kind random sort try get many distinct highlighting results possible i.e score sequencing would cluster highlight values post processing build set strings highlighting results removing highlight elements intent becomes set 'mark twain strings chug facet_field list author_facet preserve entry set strings built highlighting results present result back users along counts facet really ugly usually work help visualize 's excerpts response join conversation may even get ipad nook cid replaced email.addr.es like us facebook cid replaced email.addr.es follow us twitter. hi hoping someone thoughts running solr patch solrqueryparser.java getluceneversion calls use lucenematchversion directly running solr cores schema use solrj run searches java app running jboss jboss tomcat solr index folders server case relevant using jmeter load test harness running solaris processor box 00gb physical memory run successful load test user load rate solr searches second solr search responses coming 000ms tried ramp far tell solr hanging logging statements around solrj calls log long query construction takes run solrj query log search times getting number query construction logs corresponding search time logs tomcat jboss processes show well cpu still top processes cpu states show around idle usage two java processes around 0gb lwp state shows sleep jboss still 'alive get piece software talks jboss app get data set things use log0j logging solr log showing errors exceptions indexing searching back january load testing prototype problems though solr time ramped beautifully bottle necks apps solr benchmarking descendent prototyping bit complex searches fields schema basic search logic far solrj usage ideas else look ringing bells send details anyone wants specifics. hoping sort work multivalued field normally trying makes sense example two authors document would expect document sort 's smith jones probably specific rule choose least generic sense wanted example able sort first author could index first author separate non-multivalued field purely sort still authors multivalued field join conversation like us facebook follow us twitter. set new field concatenation 'field 'category group facet many combinations would talking field run query something bit similar wanted 'author search 'author field documents field set based 'author search well field based 'author faceting search author field return results facet values display facet values counts users select issue new query return documents author facet value. setting reading thread seems could search 'macman hit 'macman 'maecman since seems could map single replacement mapped multiple times generating multiple tokens thanks view message context http //replaced.url sent solr user mailing list archive nabble.com. make field multi-valued field indexing time split text sentences putting sentence solr document values mv field think normal highlighting code used pull entire value i.e sentence matching mv instance within document i.e put 'overhead index step rather trying search time. put default value group_id field solr schema would work e.g something like 'unknown shall get original group_id value still grouped together figure display time. looked parameter. hmmm maybe need define mean 'server mean 'client view message context http //replaced.url sent solr user mailing list archive nabble.com. hi sorry 'spam testing posts actually seen sent queries past couple weeks single response anyways two would respond would appreciate let know ignored vs unseen thanks join conversation may even get ipad nook cid replaced email.addr.es like us facebook cid replaced email.addr.es follow us twitter. second query clause instead otherwise mixing apples themes_raw oranges themes. ok figured solr really surprised prototype benchmarks used different instance tomcat using production load tests prototype tomcat instance maxthreads value set using default value production tomcat environment maxthreads value running threads getting connection refused exceptions thrown ramped solr hits past certain level thanks considering yonik others waiting see reply made others said listserv great. guarantee 'best algorithm 's use final static helper methods set characters strings solr treats special meaning query corresponding escaped versions note actual operators show escape characters wherever occur escapes special characters search terms get confused. hmmm maybe understanding getting jonathan say 'there good way solr run query across multiple solr indexes 'shards parameter allows searching across multiple cores instance shards across multiple instances certainly implications like relevance consistent across cores shards works pretty well us thanks. unfortunately wild card search terms get processed analyzers suggestion fairly common make sure lower case wild card search terms issuing query. use solrj dynamically created core capability know advance cores require almost always complete index build previous instance index needs available complete index build two cores index switch required indexing run 's summary 're early prototype implementation right production quality code tell voluminous methods identify core exists create method instantiates two solrserver objects solr indexcore requires create two cores indexname already exist live core used searching second core used indexing indexing two switched just-indexed core become live core way core works live core always named indexname indexing core always named indexname _index datadir core alternate indexname indexname create core already exists returns true new core created false otherwise solrj provides direct method check core exists getstatus index clearing first complete rebuild various logic submit batches could adjust core index complete reindexes need index always searchable hope helps. good answer may depend wanting restrict 000k documents seeking reduce time spent solr determining doc count wanting prevent people moving far result set case display digits return count solr performing adequately could always artificially restrict result set solr actually 'return 0m documents returns number specified query well cache next results anticipation subsequent query total count returned exceeds 000k report 000k number results similarly restrict far user page results sounds like sort results descending post date fact get recent ones coming back first. hi bill others post worth specialized resolution wrote similar requirement may help similar requirements running wanted able return facets matched actual search rather facets entire result set example user searches author 'twain present list facets match 'twain exclude facets 'twain found tell users 'facet values present alpha-sorted list author names count associated documents search author search field identify matching documents get facets i.e normal solr processing point filter facet set include match original search added extra facet parameter facet.sirsidynix.filter.facets instruct solr special facet filtering modified simplefacets method gettermcounts right final return counts like added method 'filtercounts basically wrapping things run search facet value setting instances based schema inserting facet value running original query anything matches score ones keep filters counts entries match original query using lucene 's fast in-memory single document index queries run string value count create run original query anything score means 'hit value matches original query retain score means hit i.e facet value associated document matched query facet value match query param field field facet values came original search would initial_author_srch_boost well string time shove single-values initial_xxx fields good enough query able correctly bit explanation schema order suffixed facet fields _facet hence first statement matching 'searchable 'facet fields names basically differ suffix strip '_facet append '_boost '_fuzzy two field types searching possibly applying boosts fuzzy matching shall see exactly hopefully modify version match schema basically idea derive field original search issued facet field shall read see works rather re-iterating anything date faceting ranges anything facet prefix handling may may work need prefixes anything else facets handle least test say special case us way intended general solution fit 'prime time submission solr enhancement. well could magnitude notation approach depends complex strings based examples would work identify series integers string assumes lengths series insert number integers string integer series sorting would sort string00 string00 string000 use original strings displays. hi relatively special case parent child relationship trying model currently using solr lucene example parent documents represent information e.g bibliographic information parent document contain children child representing physical copy book information e.g think library multiple branches child documents represent books format available given branch think special set information need solr lucene make use facet based need facet counts child facets example harry potter last crusade j.k. rowlings upcoming block novel following information etc etc bit simplified actually fields involved child document five fields used individually easy combination much harder refine result set relatively straightforward approach location format ordinary everyday facet fields certainly get results although ignore facet counts search book without facets applied get back facets like narrow things work though logically hole trying fill example suppose user chooses narrow location branch format dvd still get hit back child record values user looking dvd 's branch library dvd main completely controlling indexing searching side code i.e formulate document content indexed parse results presenting users approach thinking brute force method accomplishing using facets using facet.prefix parameter query could generate 'facets like narrowing single facet e.g location branch would usual facet search something like would request back facets like parse values returned location-format_facet retrieve follows branch- prefix would facet values 'format facet presented users 'book remains value fields pretty straightforward could somewhat simplified two facet fields instead four keeping paired facets using singleton facets retrieving paired fields limiting taking place parsing pairs location format facets limiting element use facet.prefix limiting choose facets look concatenated value however gets complex ramp fields generally requires individual facet fields number underlying fields i.e two fields two facet fields needed solr/lucene index support three fields could facets required fields would required facets getting bit much hmmm little scribbling ok fair bit scribbling actually reduce facet fields cover fields maybe bad interesting actually coded anything yet paper-napkin level exercise thing done perused various archived threads upcoming functionality regarding parent child hierarchical document strategies found anything would help much least directly saw jira lucene-0 nested document query support looks slides overview structurally would indicates query parser support place yet i.e solr query able relate child level queries either within base query clause question finally logical problem seem resolvable approach brute force outlined willing dive solr lucene code would like indication people think would good possible approach get level e.g way providing indexer tuple found combination values something searching facet queries thanks. dumb question time using bit java bit java. hi working upgrading troubles unit test code custom filters wrote tests extend abstractsolrtestcase reading thread test-harness elements present distributables checked branch code built ant generate-maven-artifacts found lucene-test-framework-0-xxx.jar however contain lucene level framework elements none solr solr test framework actually get built embedded solr jars somewhere way build jar contains solr portion test harnesses thanks
